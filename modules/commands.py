import sys

from .top import *
from .updates import *
from .casino import *
from .config import MyBotState

from telegram import (
    MessageEntity,
)

async def subscribe(update: Update, context: CallbackContext):
    user = update.effective_user
    if not user:
        return

    async def send_dm(text):
        await context.bot.send_message(chat_id=user.id, text=text)

    async def reply_in_chat(text):
        await update.message.reply_text(text)

    await subscribe_flow_(
        user.id,
        send_dm=send_dm,
        reply_in_chat=reply_in_chat,
    )

async def unsubscribe(update: Update, context: CallbackContext):
    user = update.effective_user
    if not user:
        return
    uid = user.id
    if uid in MyBotState.SUBSCRIBERS:
        MyBotState.SUBSCRIBERS.remove(uid)
        MyBotState.save_subscribers(MyBotState.SUBSCRIBERS)
        await update.message.reply_text("‚ö†Ô∏è –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª—É–± —Å—Ç–∞–ª–∫–µ—Ä–æ–≤ –†—ã–∂–æ–ø–µ—á–∞.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –¢–∞–∫ —Ç—ã –∏ –Ω–µ —Å–ª–µ–¥–∏–ª, —á–µ–ª...")

async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    if not user:
        return
    await update.message.reply_text("‚ÑπÔ∏è –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

async def warn_use_dm(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Å—é–¥–∞."
    )

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text, kb = await build_stats_page_async("global", 0, context.bot)
    sent = await update.message.reply_text(
        text,
        parse_mode="HTML",
        reply_markup=kb
    )
    MyBotState.stats_sessions[sent.message_id] = update.effective_user.id


async def show_rating(update: Update, context: CallbackContext):
    return

async def shutdown_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in MyBotState.MODERATORS:
        return

    await update.message.reply_text("üîå Shutting down, saving stats‚Ä¶")

    MyBotState.save_stats()
    MyBotState.save_daily_stats()
    clear_and_save_cocks()
    MyBotState.save_meta_info()

    sys.exit(0)

async def edit_weights_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id not in MyBotState.MODERATORS:
        return

    dump = json.dumps(MyBotState.emoji_weights, ensure_ascii=False, indent=2)
    
    sent = await update.message.reply_text(dump)
    context.user_data["weights_msg_id"] = sent.message_id

async def edit_weights_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return
    parent = msg.reply_to_message
    if not parent or parent.message_id != context.user_data.get("weights_msg_id"):
        return

    text = msg.text or ""
    m = re.match(r"\s*(.+?)\s*:\s*(\-?\d+)\s*$", text)
    if not m:
        return await msg.reply_text("‚ÑπÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–∞–ø–∏—à–∏—Ç–µ `emoji: —á–∏—Å–ª–æ`.")

    key_raw, val_raw = m.group(1), m.group(2)
    ce = next(
        (e for e in (msg.entities or [])
         if e.type == MessageEntity.CUSTOM_EMOJI),
        None
    )
    if ce:
        key = f"<custom:{ce.custom_emoji_id}>"
    else:
        key = key_raw  

    try:
        weight = int(val_raw)
    except ValueError:
        return await msg.reply_text("‚ÑπÔ∏è –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    # update & save
    MyBotState.emoji_weights[key] = weight
    MyBotState.save_emoji_weights()

    await msg.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {key} ‚Üí {weight}")

async def ban_sc_user(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return
    
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban_sc_user uid")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await msg.reply_text("‚ùå –í—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä /ban_sc_user 123456789")
        return

    try:
        user_chat = await context.bot.get_chat(target_id)
        name = parse_name(user_chat)
    except Exception:
        name = f"[ID {target_id}]"
    if target_id not in MyBotState.social_rating:
        await msg.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Ü. —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return
    
    MyBotState.social_rating[target_id]["banned"] = True
    MyBotState.save_social_rating()

    await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Ü. —Ä–µ–π—Ç–∏–Ω–≥–µ.")

async def unban_sc_user(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return
    
    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban_sc_user uid")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await msg.reply_text("‚ùå –í—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä /unban_sc_user 123456789")
        return

    try:
        user_chat = await context.bot.get_chat(target_id)
        name = parse_name(user_chat)
    except Exception:
        name = f"[ID {target_id}]"
    if target_id not in MyBotState.social_rating:
        await msg.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Ü. —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return
    
    MyBotState.social_rating[target_id]["banned"] = False
    MyBotState.save_social_rating()

    await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Ü. —Ä–µ–π—Ç–∏–Ω–≥–µ.")

async def change_social_rating(update: Update, context: CallbackContext):
    if not check_group_owner(update):
        return

    reply = update.message.reply_to_message
    if not reply:
        await update.message.reply_text(
            "–¢—ã –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–µ—Ä–∞\n"
            "/sc <+N –∏–ª–∏ -N> [–ø—Ä–∏—á–∏–Ω–∞]\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä (–æ—Ç–≤–µ—Ç–æ–º): /sc +3 –°–ø–∞—Å–∏–±–∫–∏ –∑–∞ –≤–∫–ª–∞–¥!"
        )
        return

    target = reply.from_user
    target_id = target.id
    display_name = target.username and f"@{target.username}" or target.full_name or str(target_id)

    if not context.args:
        await update.message.reply_text("‚ùå –¢—ã –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑–∞—Ç—å +N –∏–ª–∏ -N, –Ω–∞–ø—Ä–∏–º–µ—Ä /sc +2")
        return

    diff_str = context.args[0]
    try:
        diff = int(diff_str)
    except ValueError:
        await update.message.reply_text("‚ùå –í—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä +5 –∏–ª–∏ -2.")
        return

    if target_id not in MyBotState.social_rating:
        MyBotState.social_rating[target_id] = {
            "additional_chat": 0,
            "additional_neri": 0,
            "additional_self": 0,
            "boosts": 0,
            "manual_rating": 0,
        }

    old = MyBotState.social_rating[target_id]["manual_rating"]
    MyBotState.social_rating[target_id]["manual_rating"] = old + diff
    update_coins(target_id, diff)

    MyBotState.save_social_rating()
    
    word = "–ø–æ–ª—É—á–∏–ª"
    social_rating_image = SOCIAL_ADD_RATING_IMAGE
    if diff < 0:
        word = "–ø–æ—Ç–µ—Ä—è–ª"
        social_rating_image = SOCIAL_SUB_RATING_IMAGE

    caption = f"‚úÖ {display_name} {word} {abs(diff)} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
    if len(context.args) > 1:
        reason = " ".join(context.args[1:])
        caption += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"

    try:
        with open(social_rating_image, "rb") as photo:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=caption
            )
    except FileNotFoundError:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=caption
        )

async def add_banword(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return

    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bw —Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 ‚Ä¶")
        return

    new_words = {w.strip().lower() for w in context.args if w.strip()}

    added = new_words - MyBotState.BANWORDS
    MyBotState.BANWORDS.update(added)

    if added:
        await msg.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(added)} –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞: " +
            ", ".join(sorted(added))
        )
    else:
        await msg.reply_text("–í—Å–µ —ç—Ç–∏ —Å–ª–æ–≤–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
    MyBotState.save_banwords()
    MyBotState.compile_patterns()

async def remove_banword(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return

    if not context.args:
        await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_bw —Å–ª–æ–≤–æ1 —Å–ª–æ–≤–æ2 ‚Ä¶")
        return

    requested = {w.strip().lower() for w in context.args if w.strip()}

    present    = requested & MyBotState.BANWORDS
    not_found  = requested - MyBotState.BANWORDS

    MyBotState.BANWORDS.difference_update(present)

    if present:
        await msg.reply_text(
            f"‚úÖ –£–±—Ä–∞–Ω–æ {len(present)} —Å–ª–æ–≤(–∞): " + ", ".join(sorted(present)) +
            (f"\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {', '.join(sorted(not_found))}"
             if not_found else "")
        )
    else:
        await msg.reply_text("–ù–∏ –æ–¥–Ω–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω-—Å–ª–æ–≤.")
    MyBotState.save_banwords()
    MyBotState.compile_patterns()

async def start_bet(update: Update, context: CallbackContext):
    print("starting bet")
    user = update.effective_user
    msg  = update.effective_message

    if not user or (user.id not in MyBotState.MODERATORS and not is_helper(user.id)):
        return

    text = msg.text or ""
    parts = text.split(" ", 1)
    if len(parts) < 2 or not parts[1].strip():
        return await msg.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start_bet –í–æ–ø—Ä–æ—Å? –û–ø—Ü–∏—è A;–û–ø—Ü–∏—è B;–û–ø—Ü–∏—è C"
        )
    payload = parts[1].strip()

    try:
        question_part, opts_part = payload.split("?", 1)
        question = question_part.strip() + "?"
        options  = [o.strip() for o in opts_part.split(";") if o.strip()]
        if len(options) < 2:
            raise ValueError()
    except ValueError:
        return await msg.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/start_bet –í–æ–ø—Ä–æ—Å? –û–ø—Ü–∏—è A;–û–ø—Ü–∏—è B;–û–ø—Ü–∏—è C"
        )

    # insert into your SQLite
    with db:
        cur = db.execute(
            "INSERT INTO poll (question) VALUES (?)",
            (question,)
        )
        poll_id = cur.lastrowid

        for idx, text in enumerate(options):
            db.execute(
                "INSERT INTO poll_option (poll_id, idx, option) VALUES (?,?,?)",
                (poll_id, idx, text)
            )
    
    text, kb, buf = create_bet_image_and_text(poll_id)
    
    sent = await context.bot.send_photo(
        chat_id=ORIG_CHANNEL_ID,
        photo=buf,
        caption=text,
        reply_markup=kb,
        parse_mode="Markdown"
    )
    
    with db:
        db.execute(
            "UPDATE poll SET chat_id=?, message_id=? WHERE id=?",
            (sent.chat_id, sent.message_id, poll_id)
        )

    # confirm to the moderator
    await msg.reply_text(f"‚úÖ –û–ø—Ä–æ—Å #{poll_id} —Å–æ–∑–¥–∞–Ω.")

async def close_bet(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or (user.id not in MyBotState.MODERATORS and not is_helper(user.id)):
        return

    args = context.args or []
    if len(args) != 1 or not args[0].isdigit():
        return await msg.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close_bet <poll_id>")
    poll_id = int(args[0])

    # 1) Check status
    with db:
        poll_row = db.execute(
            "SELECT status FROM poll WHERE id = ?", (poll_id,)
        ).fetchone()
        if not poll_row:
            return await msg.reply_text(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å #{poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if poll_row["status"] != 0:
            return await msg.reply_text(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å #{poll_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç —Ä–∞–Ω–µ–µ.")

        # mark closed (no more new stakes)
        db.execute("UPDATE poll SET status = 1 WHERE id = ?", (poll_id,))
    await msg.reply_text(f"‚è∏ –û–ø—Ä–æ—Å #{poll_id} –∑–∞–∫—Ä—ã—Ç. –ù–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")

async def finish_bet(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or (user.id not in MyBotState.MODERATORS and not is_helper(user.id)):
        return

    args = context.args or []
    if len(args) != 2 or not all(arg.isdigit() for arg in args):
        return await msg.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /finish_bet <poll_id> <winning_option_idx>"
        )
    poll_id, win_idx = map(int, args)

    with db:
        poll_row = db.execute(
            "SELECT status, question FROM poll WHERE id = ?",
            (poll_id,)
        ).fetchone()
        if not poll_row:
            return await msg.reply_text(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å #{poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        question = poll_row["question"]
        if poll_row["status"] == 2:
            return await msg.reply_text(f"‚ÑπÔ∏è –û–ø—Ä–æ—Å #{poll_id} —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω —Ä–∞–Ω–µ–µ.")

        opt_row = db.execute(
            "SELECT option FROM poll_option WHERE poll_id = ? AND idx = ?",
            (poll_id, win_idx)
        ).fetchone()
        if not opt_row:
            return await msg.reply_text(
                f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç #{win_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø—Ä–æ—Å–µ #{poll_id}."
            )
        winning_option = opt_row["option"]

        # 3) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏
        bets = db.execute(
            "SELECT user_id, option_idx, amount FROM bets WHERE poll_id = ?",
            (poll_id,)
        ).fetchall()
        # –ï—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º
        if not bets:
            db.execute(
                "UPDATE poll SET status = 2, winner_idx = ? WHERE id = ?",
                (win_idx, poll_id)
            )
            return await msg.reply_text(
                f"‚ÑπÔ∏è –û–ø—Ä–æ—Å #{poll_id} –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–í—ã–∏–≥—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç: ¬´{winning_option}¬ª\n"
                "–°—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ."
            )

    # 4) –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    winners = [(r["user_id"], r["amount"]) for r in bets if r["option_idx"] == win_idx]
    losers  = [(r["user_id"], r["amount"]) for r in bets if r["option_idx"] != win_idx]
    total_win  = sum(a for _, a in winners)
    total_lose = sum(a for _, a in losers)

    # 5) –û—Ç–º–µ—á–∞–µ–º –æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    with db:
        db.execute(
            "UPDATE poll SET status = 2, winner_idx = ? WHERE id = ?",
            (win_idx, poll_id)
        )

    # 6) –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    if total_win == 0:
        return await context.bot.send_message(
            chat_id=ORIG_CHANNEL_ID,
            text=(
                f"‚ö†Ô∏è –û–ø—Ä–æ—Å #{poll_id} –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–í—ã–∏–≥—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç: ¬´{winning_option}¬ª, "
                "–Ω–æ –Ω–∞ –Ω–µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–≤–∏–ª.\n"
                f"–û–±—â–∏–µ –ø–æ—Ç–µ—Ä–∏: {total_lose} —Ä—ã–∂–µ–Ω–∫–∏."
            )
        )

    # 7) –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—ã
    payouts = {}
    for uid, stake in winners:
        share  = (stake / total_win) * total_lose
        payout = int(stake + share)
        update_coins(uid, payout)
        payouts[uid] = payout

    # 8) –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = [
        f"üèÅ –û–ø—Ä–æ—Å #{poll_id} –∑–∞–≤–µ—Ä—à—ë–Ω!",
        f"–í–æ–ø—Ä–æ—Å: {question}",
        f"–í—ã–∏–≥—Ä–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç: ¬´{winning_option}¬ª",
        f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_win + total_lose} —Ä—ã–∂–µ–Ω–∫–∏ "
        f"(–Ω–∞ –ø–æ–±–µ–¥—É ‚Äî {total_win}, –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ ‚Äî {total_lose})",
        "",
        "üí∞ –í—ã–ø–ª–∞—Ç—ã:"
    ]
    for uid, amt in payouts.items():
        try:
            # fetch the User/Chat object and format via parse_name
            user_chat = await context.bot.get_chat(uid)
            name = parse_name(user_chat)
        except Exception:
            # fallback in case of error
            name = f"[ID {uid}]"
        lines.append(f"‚Ä¢ {name}: +{amt} —Ä—ã–∂–µ–Ω–∫–∏")

    await context.bot.send_message(
        chat_id=ORIG_CHANNEL_ID,
        text="\n".join(lines),
        parse_mode=constants.ParseMode.HTML,
    )

async def slot_command(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message
    if not user:
        return

    if user.id == TARGET_USER and update.effective_chat.id != ORIG_CHANNEL_ID:
        await msg.delete()
        return

    #check chat id
    if update.effective_chat.id == ORIG_CHANNEL_ID and not user.id in MyBotState.MODERATORS:
        await msg.delete()
        return

    if not MyBotState.slot and not user.id in MyBotState.MODERATORS:
        now_ts = int(datetime.now(TYUMEN).timestamp())
        recent = db.execute(
            "SELECT ts FROM slot_rolls WHERE user_id = ? ORDER BY ts DESC LIMIT 5",
            (user.id,)
        ).fetchall()
        timestamps = [r["ts"] for r in recent]
        if len(timestamps) == 5:
            oldest = timestamps[-1]
            if now_ts - oldest < 30 * 60:
                next_avail_ts = oldest + 30 * 60
                next_dt = datetime.fromtimestamp(
                    next_avail_ts, tz=TYUMEN
                )
                time_str = next_dt.strftime("%Y-%m-%d %H:%M:%S")
                warning = await msg.reply_text(
                    f"‚ùå –õ–∏–º–∏—Ç: 5 –ø—Ä–æ–∫—Ä—É—Ç–æ–∫ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. "
                    f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ {time_str}"
                )
                #asyncio.create_task(
                #    delete_messages_later([msg, warning], delay=5)
                #)
                return
        with db:
            db.execute(
                "INSERT INTO slot_rolls (user_id, ts) VALUES (?, ?)",
                (user.id, now_ts)
            )
            db.execute(
                """
                DELETE FROM slot_rolls
                WHERE user_id = ?
                AND ts NOT IN (
                    SELECT ts
                    FROM slot_rolls
                    WHERE user_id = ?
                    ORDER BY ts DESC
                    LIMIT 5
                )
                """,
                (user.id, user.id)
            )
    args = context.args or []
    action_text = None
    stake = 0
    if args:
        if args[0].isdigit():
            stake = int(args[0])
        else:
            action_text = " ".join(args)
    else:
        stake = 10

    if not action_text: #and stake > 0:
        row = db.execute(
            "SELECT coins FROM user WHERE id = ?",
            (user.id,)
        ).fetchone()
        balance = row["coins"] if row else 0
        if balance < stake:
            warning = await msg.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—ã–∂–µ–Ω–∫–∏: –Ω–∞ —Å—á–µ—Ç—É {balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {stake}."
            )
            #asyncio.create_task(
            #    delete_messages_later([msg, warning], delay=5)
            #)
            return
        update_coins(user.id, -stake)

    #if not action_text and stake == 0:
    #    warning = await msg.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π.")
        #asyncio.create_task(
        #    delete_messages_later([msg, warning], delay=5)
        #)
    #    return

    slot_msg = await msg.reply_dice(emoji="üé∞")
    res = slot_msg.dice.value - 1
    v0 = (res >> 4) & 0b11
    v1 = (res >> 2) & 0b11
    v2 = res         & 0b11

    word = "–Ω–∏—á–µ–≥–æ"
    if v0 == v1 == v2:
        mult = {1:5, 2:10, 0:15, 3:30}[v0]
        word = {1:"–≤–∏–Ω–æ–≥—Ä–∞–¥", 2:"–ª–∏–º–æ–Ω—ã", 0:"—Å–ª–∏—Ç–∫–∏", 3:"—Ç–æ–ø–æ—Ä—ã"}[v0]
    else:
        mult = 0

    name = parse_mention(user)
    result_msg = None
    if not action_text:
        new_balance = balance - stake + mult * stake

        # build and send result text (coins)
        if mult:
            payout = stake * mult
            update_coins(user.id, payout)
            result_text = (
                f"üéâ –£—Ä–∞! {name} –Ω–∞–ª–µ—Ç–µ–ª –Ω–∞ ¬´{word}¬ª –∏ –ø–æ–º–Ω–æ–∂–∏–ª —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –≤ "
                f"{mult} —Ä–∞–∑ ‚Äî –≤—Å–µ–≥–æ +{payout} —Ä—ã–∂–µ–Ω–∫–∏! "
                f"–ë–∞–ª–∞–Ω—Å: {new_balance} —Ä—ã–∂–µ–Ω–∫–∏"
            )
        else:
            result_text = (
                f"üíî –£–≤—ã, {name} –ø—Ä–æ–∏–≥—Ä–∞–ª —Å—Ç–∞–≤–∫—É –≤ {stake} —Ä—ã–∂–µ–Ω–∫–∏."
                f" –ë–∞–ª–∞–Ω—Å: {new_balance} —Ä—ã–∂–µ–Ω–∫–∏"
            )

        result_msg = await msg.reply_text(
            text=result_text,
            parse_mode=constants.ParseMode.HTML
        )

        #if not mult:
            #asyncio.create_task(
            #    delete_messages_later(
            #        [msg, slot_msg, result_msg],
            #        delay=30
            #    )
            #)

    if action_text:
        if mult:
            await msg.reply_text(
                f"{name} –Ω–∞–ª–µ—Ç–µ–ª –Ω–∞ ¬´{word}¬ª –∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω {action_text}",
                parse_mode=constants.ParseMode.HTML
            )
        #else:
            #asyncio.create_task(
            #    delete_messages_later(
            #        [msg, slot_msg],
            #        delay=30
            #    )
            #)

async def stop_slot_command(update: Update, context: CallbackContext):
    user = update.effective_user
    msg = update.effective_message
    
    if not user or (user.id not in MyBotState.MODERATORS and not is_helper(user.id)):
        return
    
    MyBotState.slot = False
    res = await msg.reply_text("‚úÖ –°–ª–æ—Ç –º–∞—à–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def resume_slot_command(update: Update, context: CallbackContext):
    user = update.effective_user
    msg = update.effective_message
    
    if not user or (user.id not in MyBotState.MODERATORS and not is_helper(user.id)):
        return
    
    MyBotState.slot = True
    res = await msg.reply_text("‚úÖ –°–ª–æ—Ç –º–∞—à–∏–Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

async def add_helper(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return

    args = context.args or []
    if len(args) != 1 or not args[0].isdigit():
        return await msg.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_helper <user_id>")

    helper_id = int(args[0])

    with db:
        db.execute(
            "INSERT OR IGNORE INTO helper (id) VALUES (?)",
            (helper_id,)
        )
    
    helper_user = await context.bot.get_chat(helper_id)
    mention = parse_mention(helper_user)

    await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Å—Ç–∞–ª –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ Nerixane Cock Project.",
                         parse_mode="HTML")

async def remove_helper(update: Update, context: CallbackContext):
    user = update.effective_user
    msg  = update.effective_message

    if not user or user.id not in MyBotState.MODERATORS:
        return

    args = context.args or []
    if len(args) != 1 or not args[0].isdigit():
        return await msg.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_helper <user_id>")

    helper_id = int(args[0])
    with db:
        cur = db.execute(
            "DELETE FROM helper WHERE id = ?",
            (helper_id,)
        )
    
    helper_user = await context.bot.get_chat(helper_id)
    mention = parse_mention(helper_user)

    if cur.rowcount:
        await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –±–æ–ª—å—à–µ –Ω–µ –ø–æ–º–æ—â–Ω–∏–∫ –≤ Nerixane Cock Project.",
                             parse_mode="HTML")
    else:
        await msg.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –±—ã–ª –ø–æ–º–æ—â–Ω–∏–∫–æ–º.",
                             parse_mode="HTML")